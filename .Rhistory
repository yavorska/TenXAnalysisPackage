meanDF$allLib <- geneMeans
cvDF$allLib <- varDF$allLib/(meanDF$allLib^2)
tooSmall <- which(meanDF$allLib <= 8.944624e-06, arr.ind = TRUE)
1/cellN(TenXSubsetFiltered)
10/cellN(TenXSubsetFiltered)
meanDF[tooSmall,] <- NA
varDF[tooSmall,] <- NA
cvDF[tooSmall,] <- NA
View(varDF)
plotTenXGroupExpr(TenXSubsetAll, "Calm2")
plotTenXGroupExpr(Test_TenXSubset, "Calm2")
plotTenXGene(TenXSubsetAll, "Rbm3")
plotTenXGene(TenXSubsetAll, "Cirbp")
plotTenXGene(TenXSubsetAll, "Calm2")
setMethod(f = "plotTenXGene",
signature = signature(object = "TenXSubset",
geneName = "character"),
definition = function(object, geneName){
nBins <- 200
# Step 1. Determine which gene we are working with and the
#         corresponding values.
geneVec <- determineGeneID(geneName, object)
if(sum(geneVec) > 2){
stop("Multiple genes found with this name!
Use ENSEMBL ids instead.")
}
geneDF <- data.frame(Gene = geneNames(object),
Trans = rowSums(geneCounts(object)),
Cells = rowSums(geneExpressed(object)),
NormTrans =
rowSums(geneCounts(object))/
rowSums(geneCounts(object) != 0),
SelectedGene = geneVec)
toReturn <- geneDF[geneVec, 1:4]
geneDF <- geneDF[geneDF$Cells > 0,]
meltedGeneDF <- melt(geneDF, id = c("Gene", "SelectedGene"))
meltedGeneDF <- meltedGeneDF %>%
ungroup() %>%   # As a precaution / handle in a separate .grouped_df method
arrange(variable, value) %>%   # arrange by facet variables and continuous values
mutate(rowVal = row_number()) # Add a row number variable
meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"])
meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"])
#return(meltedGeneDF)
plot(ggplot(meltedGeneDF,
aes(x = rowVal, y = value,
color = SelectedGene,
alpha = SelectedGene,
size = SelectedGene)) +
geom_point() +
scale_alpha_manual(values = c(0.2,1)) +
scale_size_manual(values = c(0.5,1)) +
scale_color_manual(values = c("gray", "red")) +
facet_grid(variable~., scales = "free") +
theme_classic() + theme(legend.position = "none") +
xlab("Sorted gene statistics") +
ggtitle(paste0(geneName, " counts relative to other genes")))
return(toReturn)
})
plotTenXGene(TenXSubsetAll, "Calm2")
setMethod(f = "plotTenXGene",
signature = signature(object = "TenXSubset",
geneName = "character"),
definition = function(object, geneName){
nBins <- 200
# Step 1. Determine which gene we are working with and the
#         corresponding values.
geneVec <- determineGeneID(geneName, object)
if(length(geneVec) > 2){
stop("Multiple genes found with this name!
Use ENSEMBL ids instead.")
}
geneDF <- data.frame(Gene = geneNames(object),
Trans = rowSums(geneCounts(object)),
Cells = rowSums(geneExpressed(object)),
NormTrans =
rowSums(geneCounts(object))/
rowSums(geneCounts(object) != 0),
SelectedGene = geneVec)
toReturn <- geneDF[geneVec, 1:4]
geneDF <- geneDF[geneDF$Cells > 0,]
meltedGeneDF <- melt(geneDF, id = c("Gene", "SelectedGene"))
meltedGeneDF <- meltedGeneDF %>%
ungroup() %>%   # As a precaution / handle in a separate .grouped_df method
arrange(variable, value) %>%   # arrange by facet variables and continuous values
mutate(rowVal = row_number()) # Add a row number variable
meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"])
meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"])
#return(meltedGeneDF)
plot(ggplot(meltedGeneDF,
aes(x = rowVal, y = value,
color = SelectedGene,
alpha = SelectedGene,
size = SelectedGene)) +
geom_point() +
scale_alpha_manual(values = c(0.2,1)) +
scale_size_manual(values = c(0.5,1)) +
scale_color_manual(values = c("gray", "red")) +
facet_grid(variable~., scales = "free") +
theme_classic() + theme(legend.position = "none") +
xlab("Sorted gene statistics") +
ggtitle(paste0(geneName, " counts relative to other genes")))
return(toReturn)
})
plotTenXGene(TenXSubsetAll, "Rbm3")
plotTenXGene(TenXSubsetAll, "Calm2")
setMethod(f = "plotTenXGene",
signature = signature(object = "TenXSubset",
geneName = "character"),
definition = function(object, geneName){
nBins <- 200
# Step 1. Determine which gene we are working with and the
#         corresponding values.
geneVec <- determineGeneID(geneName, object)
if(length(geneVec) > 2){
stop("Multiple genes found with this name!
Use ENSEMBL ids instead.")
}
geneDF <- data.frame(Gene = geneNames(object),
Trans = rowSums(geneCounts(object)),
Cells = rowSums(geneExpressed(object)),
NormTrans =
rowSums(geneCounts(object))/
rowSums(geneCounts(object) != 0),
SelectedGene = geneVec)
toReturn <- geneDF[geneVec, 1:4]
geneDF <- geneDF[geneDF$Cells > 0,]
meltedGeneDF <- melt(geneDF, id = c("Gene", "SelectedGene"))
meltedGeneDF <- meltedGeneDF %>%
ungroup() %>%   # As a precaution / handle in a separate .grouped_df method
arrange(variable, value) %>%   # arrange by facet variables and continuous values
mutate(rowVal = row_number()) # Add a row number variable
meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"])
meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"])
#return(meltedGeneDF)
plot(ggplot(meltedGeneDF,
aes(x = rowVal, y = value,
color = SelectedGene,
alpha = SelectedGene,
size = SelectedGene)) +
geom_point() +
scale_alpha_manual(values = c(0.2,1)) +
scale_size_manual(values = c(0.5,1)) +
scale_color_manual(values = c("gray", "red")) +
facet_grid(variable~., scales = "free") +
theme_classic() + theme(legend.position = "none") +
xlab("Sorted gene statistics") +
ggtitle(paste0(geneName, " counts relative to other genes")))
return(toReturn)
})
plotTenXGene(TenXSubsetAll, "Calm2")
determineGeneID("KRAS", Test_TenXSubset)
setMethod(f = "plotTenXGene",
signature = signature(object = "TenXSubset",
geneName = "character"),
definition = function(object, geneName){
nBins <- 200
# Step 1. Determine which gene we are working with and the
#         corresponding values.
geneVec <- rep(FALSE, geneN(object))
geneVec[determineGeneID(geneName, object)] <- TRUE
if(length(geneVec) > 2){
stop("Multiple genes found with this name!
Use ENSEMBL ids instead.")
}
geneDF <- data.frame(Gene = geneNames(object),
Trans = rowSums(geneCounts(object)),
Cells = rowSums(geneExpressed(object)),
NormTrans =
rowSums(geneCounts(object))/
rowSums(geneCounts(object) != 0),
SelectedGene = geneVec)
toReturn <- geneDF[geneVec, 1:4]
geneDF <- geneDF[geneDF$Cells > 0,]
meltedGeneDF <- melt(geneDF, id = c("Gene", "SelectedGene"))
meltedGeneDF <- meltedGeneDF %>%
ungroup() %>%   # As a precaution / handle in a separate .grouped_df method
arrange(variable, value) %>%   # arrange by facet variables and continuous values
mutate(rowVal = row_number()) # Add a row number variable
meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"])
meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"])
#return(meltedGeneDF)
plot(ggplot(meltedGeneDF,
aes(x = rowVal, y = value,
color = SelectedGene,
alpha = SelectedGene,
size = SelectedGene)) +
geom_point() +
scale_alpha_manual(values = c(0.2,1)) +
scale_size_manual(values = c(0.5,1)) +
scale_color_manual(values = c("gray", "red")) +
facet_grid(variable~., scales = "free") +
theme_classic() + theme(legend.position = "none") +
xlab("Sorted gene statistics") +
ggtitle(paste0(geneName, " counts relative to other genes")))
return(toReturn)
})
plotTenXGene(TenXSubsetAll, "Calm2")
setMethod(f = "plotTenXGene",
signature = signature(object = "TenXSubset",
geneName = "character"),
definition = function(object, geneName){
nBins <- 200
# Step 1. Determine which gene we are working with and the
#         corresponding values.
geneVec <- rep(FALSE, geneN(object))
geneVec[determineGeneID(geneName, object)] <- TRUE
if(sum(geneVec) > 2){
stop("Multiple genes found with this name!
Use ENSEMBL ids instead.")
}
geneDF <- data.frame(Gene = geneNames(object),
Trans = rowSums(geneCounts(object)),
Cells = rowSums(geneExpressed(object)),
NormTrans =
rowSums(geneCounts(object))/
rowSums(geneCounts(object) != 0),
SelectedGene = geneVec)
toReturn <- geneDF[geneVec, 1:4]
geneDF <- geneDF[geneDF$Cells > 0,]
meltedGeneDF <- melt(geneDF, id = c("Gene", "SelectedGene"))
meltedGeneDF <- meltedGeneDF %>%
ungroup() %>%   # As a precaution / handle in a separate .grouped_df method
arrange(variable, value) %>%   # arrange by facet variables and continuous values
mutate(rowVal = row_number()) # Add a row number variable
meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "NormTrans"])
meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"] <-
rank(meltedGeneDF$rowVal[meltedGeneDF$variable == "Cells"])
#return(meltedGeneDF)
plot(ggplot(meltedGeneDF,
aes(x = rowVal, y = value,
color = SelectedGene,
alpha = SelectedGene,
size = SelectedGene)) +
geom_point() +
scale_alpha_manual(values = c(0.2,1)) +
scale_size_manual(values = c(0.5,1)) +
scale_color_manual(values = c("gray", "red")) +
facet_grid(variable~., scales = "free") +
theme_classic() + theme(legend.position = "none") +
xlab("Sorted gene statistics") +
ggtitle(paste0(geneName, " counts relative to other genes")))
return(toReturn)
})
plotTenXGene(TenXSubsetAll, "Calm2")
plotTenXGene(Test_TenXSubset, "Rbm3")
library(TENxAnalysisPackage)
data("Test_TenXSubset")
# This data set used particularly big groups
groupSize(Test_TenXSubset)
# The transcript counts for the first 6 genes
geneCounts(Test_TenXSubset)[1:6,]
# The transcript and expressed gene counts for the first few cells
head(cellCounts(Test_TenXSubset))
plotTenX(Test_TenXSubset,
x = "libID", y = "geneCounts",
type = "boxplot",
colorByCells = "mouse", colorByGenes = NULL)
plotTenXGroupExpr(Test_TenXSubset, "Rbm3")
plotTenXMouseExpr(TenXSubsetAll, "Rmb3")
plotTenXMouseExpr(TenXSubsetAll, "Rmb3", "all")
determineGeneFromQuery("neural stem cells")
determineGeneFromQuery("NSC")
determineGeneFromQuery("stem cells")
determineGeneFromQuery("epithelial cells")
plotTenXGeneCor(TenXSubsetAll, determineGeneFromQuery("epithelial cells"))
plotTenXGeneCor(TenXSubsetAll, determineGeneFromQuery("epithelial cells")$Symbol)
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("epithelial cells")$Symbol))
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("macrophage")$Symbol))
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("astrocyte")$Symbol))
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("oligodendrocyte")$Symbol))
plotTenXGeneCor(TenXSubsetFiltered, as.vector(determineGeneFromQuery("oligodendrocyte")$Symbol))
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("oligodendrocyte development")$Symbol))
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("neural stem cells")$Symbol))
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("neural stem cell")$Symbol))
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("stem cell")$Symbol))
determineGeneFromQuery("neurogenesis")
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("neurogenesis")$Symbol))
plotTenXGeneCor(TenXSubsetFiltered, as.vector(determineGeneFromQuery("neurogenesis")$Symbol))
plotTenXGeneCor(TenXSubsetFiltered, as.vector(determineGeneFromQuery("oligodendrocyte development")$Symbol))
plotTenXGeneCor(TenXSubsetAll, as.vector(determineGeneFromQuery("oligodendrocyte development")$Symbol))
plotTenXGenePair(TenXSubsetAll, "Tgfb1", "Kcnj10")
plotTenXGenePair(TenXSubsetAll, "Tgfb1", "Hes5")
plotTenXGenePair(TenXSubsetAll, "Kcnj10", "Hes5")
plotTenXGenePair(TenXSubsetAll, "Eif2b5", "Hdac11")
plotTenXGenePair(TenXSubsetFiltered, "Eif2b5", "Hdac11")
plotTenXGenePair(TenXSubsetAll, "Eif2b5", "Hdac11")
plotTenXGeneCor(
TenXSubsetAll,
as.vector(determineGeneFromQuery("oligodendrocyte development")$Symbol))
plotTenXGeneExpr(TenXSubsetAll, "Hes5")
plotTenXGeneExpr(TenXSubsetFiltered, "Hes5")
plotTenXGenePair(TenXSubsetAll, "Hes5", "Cd9")
?generateSubset
mouseTenXSubset <- generateSubset(sample(1:nrow(TenXse_colData), 10000),
which(TenXse_rowData$Symbol %in%
c("Ascl1", "Hes5", "Cd9")),
1,
path)
mouseTenXSubset <- generateSubset(sample(1:nrow(TenXse_colData), 100),
which(TenXse_rowData$Symbol %in%
c("Ascl1", "Hes5", "Cd9")),
1,
path)
mouseSummary <- generateSummaryExpr(mouseTenXSubset)
plotTenXMouseExpr(mouseSummary, c("Ascl1", "Hes5", "Cd9"), "all")
geneCounts(mouseTenXSubset)
mouseTenXSubset <- generateSubset(sample(1:nrow(TenXse_colData), 1000),
which(TenXse_rowData$Symbol %in%
c("Ascl1", "Hes5", "Cd9")),
1,
path)
mouseSummary <- generateSummaryExpr(mouseTenXSubset)
plotTenXMouseExpr(mouseSummary, c("Ascl1", "Hes5", "Cd9"), "all")
setMethod(f = "generateSubset",
signature = signature(cellIndex = "numeric",
geneIndex = "numeric",
groupSize = "numeric",
path = "character"),
definition = function(cellIndex, geneIndex, groupSize, path){
subsetCellN <- length(cellIndex)
subsetGeneN <- length(geneIndex)
subsetGroupN <- ceiling(subsetCellN/groupSize)
subsetCellGroup <- rep(1:subsetGroupN,
length = subsetCellN,
each = groupSize)
# Gene-cell matrix for gene and transcript counts
subsetGeneExpressed <- subsetGeneCounts <-
matrix(NA, nrow = subsetGeneN, ncol = subsetGroupN)
# Cell df for total transcript and gene counts
subsetCellCounts <- matrix(NA, nrow = subsetCellN, ncol = 2)
colnames(subsetCellCounts) <- c("nTrans", "nGenesExpr")
if(groupSize == 1){
nGroups <- subsetCellN/10000
for(run in 1:ceiling(nGroups)){
cat("run ", run, " of ", ceiling(nGroups), "\n")
runIndex <- ((run-1)*10000 + 1):min(10000*run, subsetCellN)
seMatrix <-
assay(matrixSummarizedExperiment(path,
i = geneIndex,
j = cellIndex[runIndex]))
seMatrixBinary <-
ifelse(seMatrix == 0, 0, 1)
subsetGeneExpressed[,runIndex] <- seMatrixBinary
subsetGeneCounts[,runIndex] <- seMatrix
subsetCellCounts[runIndex,1] <- colSums(seMatrix)
subsetCellCounts[runIndex,2] <- colSums(seMatrixBinary)
}
} else {
for(run in 1:subsetGroupN){
cat("run ", run, " of ", subsetGroupN, "\n")
runIndex <- (groupSize*(run-1) + 1):min(groupSize*run,
subsetCellN)
seMatrix <-
assay(matrixSummarizedExperiment(path,
i = geneIndex,
j = cellIndex[runIndex]))
seMatrixBinary <-
ifelse(seMatrix == 0, 0, 1)
subsetGeneExpressed[,run] <-
rowSums(seMatrixBinary)/length(runIndex)
subsetGeneCounts[,run] <- rowSums(seMatrix)
subsetCellCounts[runIndex,1] <- colSums(seMatrix)
subsetCellCounts[runIndex,2] <- colSums(seMatrixBinary)
}
}
return(new("TenXSubset",
geneCounts = data.frame(subsetGeneCounts),
geneExpressed = data.frame(subsetGeneExpressed),
geneNames = as.vector(TenXse_rowData$Symbol[geneIndex]),
geneENSEMBL = TenXse_rowData$Ensembl[geneIndex],
cellCounts = data.frame(subsetCellCounts),
cellMouse = as.character(TenXse_colData$Mouse[cellIndex]),
cellLib = TenXse_colData$Library[cellIndex],
cellGroup = subsetCellGroup,
cellN = subsetCellN,
groupN = subsetGroupN,
libN = length(unique(TenXse_colData$Library[cellIndex])),
geneN = subsetGeneN,
cellIndex = cellIndex,
geneIndex = geneIndex,
groupSize = groupSize))
})
mouseTenXSubset2 <- generateSubset(sample(1:nrow(TenXse_colData), 1000),
which(TenXse_rowData$Symbol %in%
c("Ascl1", "Hes5", "Cd9")),
1,
path)
mouseSummary <- generateSummaryExpr(mouseTenXSubset2)
plotTenXMouseExpr(mouseSummary, c("Ascl1", "Hes5", "Cd9"), "all")
mouseTenXSubset2 <- generateSubset(sample(1:nrow(TenXse_colData), 10000),
which(TenXse_rowData$Symbol %in%
c("Ascl1", "Hes5", "Cd9")),
1,
path)
setMethod(f = "generateSubset",
signature = signature(cellIndex = "numeric",
geneIndex = "numeric",
groupSize = "numeric",
path = "character"),
definition = function(cellIndex, geneIndex, groupSize, path){
subsetCellN <- length(cellIndex)
subsetGeneN <- length(geneIndex)
subsetGroupN <- ceiling(subsetCellN/groupSize)
subsetCellGroup <- rep(1:subsetGroupN,
length = subsetCellN,
each = groupSize)
# Gene-cell matrix for gene and transcript counts
subsetGeneExpressed <- subsetGeneCounts <-
matrix(NA, nrow = subsetGeneN, ncol = subsetGroupN)
# Cell df for total transcript and gene counts
subsetCellCounts <- matrix(NA, nrow = subsetCellN, ncol = 2)
colnames(subsetCellCounts) <- c("nTrans", "nGenesExpr")
if(groupSize == 1){
nGroups <- subsetCellN/1000
for(run in 1:ceiling(nGroups)){
cat("run ", run, " of ", ceiling(nGroups), "\n")
runIndex <- ((run-1)*1000 + 1):min(1000*run, subsetCellN)
seMatrix <-
assay(matrixSummarizedExperiment(path,
i = geneIndex,
j = cellIndex[runIndex]))
seMatrixBinary <-
ifelse(seMatrix == 0, 0, 1)
subsetGeneExpressed[,runIndex] <- seMatrixBinary
subsetGeneCounts[,runIndex] <- seMatrix
subsetCellCounts[runIndex,1] <- colSums(seMatrix)
subsetCellCounts[runIndex,2] <- colSums(seMatrixBinary)
}
} else {
for(run in 1:subsetGroupN){
cat("run ", run, " of ", subsetGroupN, "\n")
runIndex <- (groupSize*(run-1) + 1):min(groupSize*run,
subsetCellN)
seMatrix <-
assay(matrixSummarizedExperiment(path,
i = geneIndex,
j = cellIndex[runIndex]))
seMatrixBinary <-
ifelse(seMatrix == 0, 0, 1)
subsetGeneExpressed[,run] <-
rowSums(seMatrixBinary)/length(runIndex)
subsetGeneCounts[,run] <- rowSums(seMatrix)
subsetCellCounts[runIndex,1] <- colSums(seMatrix)
subsetCellCounts[runIndex,2] <- colSums(seMatrixBinary)
}
}
return(new("TenXSubset",
geneCounts = data.frame(subsetGeneCounts),
geneExpressed = data.frame(subsetGeneExpressed),
geneNames = as.vector(TenXse_rowData$Symbol[geneIndex]),
geneENSEMBL = TenXse_rowData$Ensembl[geneIndex],
cellCounts = data.frame(subsetCellCounts),
cellMouse = as.character(TenXse_colData$Mouse[cellIndex]),
cellLib = TenXse_colData$Library[cellIndex],
cellGroup = subsetCellGroup,
cellN = subsetCellN,
groupN = subsetGroupN,
libN = length(unique(TenXse_colData$Library[cellIndex])),
geneN = subsetGeneN,
cellIndex = cellIndex,
geneIndex = geneIndex,
groupSize = groupSize))
})
mouseTenXSubset2 <- generateSubset(sample(1:nrow(TenXse_colData), 1000),
which(TenXse_rowData$Symbol %in%
c("Ascl1", "Hes5", "Cd9")),
1,
path)
path <- "C:\\Users\\Olena\\Desktop\\Rcache\\9cc61ed2f8a_1M_neurons_filtered_gene_bc_matrices_h5.h5"
mouseTenXSubset2 <- generateSubset(sample(1:nrow(TenXse_colData), 1000),
which(TenXse_rowData$Symbol %in%
c("Ascl1", "Hes5", "Cd9")),
1,
path)
mouseTenXSubset2 <- generateSubset(sample(1:nrow(TenXse_colData), 10000),
which(TenXse_rowData$Symbol %in%
c("Ascl1", "Hes5", "Cd9")),
1,
path)
mouseSummary <- generateSummaryExpr(mouseTenXSubset2)
plotTenXMouseExpr(mouseSummary, c("Ascl1", "Hes5", "Cd9"), "all")
plotTenXMouseExpr(mouseSummary, "Hes5", "all")
plotTenXMouseExpr(mouseSummary, "Cd9", "all")
plotTenXGeneCor(
TenXSubsetAll,
as.vector(determineGeneFromQuery("oligodendrocyte development")$Symbol))
load("cellCountsColdGroupGenesSaved")
View(coldGroupDf)
colnames(coldGroupDf) <- coldGeneNames
coldGroupDf$Mouse <- TenXse_colData$Mouse
coldGroupDf$Library <- TenXse_colData$Library
coldGroupDf$Cell <- 1:nrow(coldGroupDf)
coldGroupDf <- coldGroupDf[,c(24,23,22,1:21)]
coldGeneNames <- c("Rbm3", "Cirbp",  "Ptma", "H3f3a", "H3f3b", "Sumo1", "Sumo2",
"Arf4", "Hnrnpk", "Prdx2", "Abracl", "Hist3h2ba",
"Cd24a", "Ubb", "Ptp4a1",
"Grin2b", "Bhlhe22", "Atp2b1", "Slc1a2", "PISD", "Zbtb20")
load("cellCountsColdGroupGenesSaved")
colnames(coldGroupDf) <- coldGeneNames
coldGroupDf$Mouse <- TenXse_colData$Mouse
coldGroupDf$Library <- TenXse_colData$Library
coldGroupDf$Cell <- 1:nrow(coldGroupDf)
coldGroupDf <- coldGroupDf[,c(24,23,22,1:21)]
